/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

#pragma ident	"%Z%%M%	%I%	%E% SMI"

/* LINTLIBRARY */
/* PROTOLIB1 */

#include <sys/time.h>
#include <varargs.h>
#include <stdio.h>
#include <sys/types.h>
#include <errno.h>
#include <sys/syscall.h>
#include <sys/siginfo.h>
#include <sys/ucontext.h>
#include <signal.h>
#include <ucontext.h>
#include <setjmp.h>
#include <sys/resource.h>
#include <sys/utsname.h>
#include <sys/systeminfo.h>
#include <sys/errno.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/uadmin.h>
#include <sys/times.h>
#include <wait.h>
#include <sys/procset.h>
#include <sys/param.h>
#include <values.h>
#include <ctype.h>
#include <nan.h>
#include <memory.h>
#include <string.h>
#include <locale.h>
#include <fcntl.h>
#include <nlist.h>
#include <sys/dir.h>
#include <sys/stat.h>
#include <sys/priocntl.h>
#include <sys/file.h>
#include <sys/fcntl.h>
#include <sys/statvfs.h>
#include <sys/vfs.h>

#include <sys/timeb.h>

/* port/sys/gettimeofday.c */
int gettimeofday(struct timeval *, void *);
int settimeofday(struct timeval *, void *);

/* port/sys/signal.c */
int _sigvechandler(int, siginfo_t *, ucontext_t *);
int _sigsetmask(int);
int ucbsigsetmask(int);
int _sigblock(int);
int ucbsigblock(int);
int usigpause(int);
int ucbsigpause(int);
int _sigvec(int, struct sigvec *, struct sigvec *);
int ucbsigvec(int, struct sigvec *, struct sigvec *);
int _sigstack(struct sigstack *, struct sigstack *);
void ucbsignal(int, void (*)());
void usignal(int, void (*)());
int _siginterrupt(int, int);
int ucbsiginterrupt(int, int);
#ifdef sparc
void __sigcleanup(struct sigcontext *);
#endif

/* port/sys/flock.c */
int flock(int, int);

/* port/sys/getdtblsize.c */
int getdtablesize(void);

/* port/sys/gethostid.c */
long gethostid(void);

/* port/sys/gethostname.c */
int gethostname(char *, int);
int sethostname(char *, int);

/* port/sys/getpagesize.c */
int getpagesize(void);

/* port/sys/killpg.c */
int killpg(int, int);

/* port/sys/mctl.c */
int mctl(caddr_t, size_t, int, int);

/* port/sys/reboot.c */
int reboot(int, char *);

/* port/sys/setreid.c */
int setreuid(int, int);
int setregid(int, int);

/* port/sys/wait3.c */
int wait3(int *, int, struct rusage *);
int wstat(int, int);

/* port/sys/wait4.c */
int wait4(pid_t, int *, int, struct rusage *);

/* port/sys/getrusage.c */
int getrusage(int, struct rusage *);

/* port/sys/setpgrp.c */
int setpgrp(pid_t, pid_t);

/* port/stdio/sprintf.c */
char *sprintf(const char *, const char *, ...);

/* port/stdio/doprnt.c */
int _doprnt(char *, va_list, FILE *);
/* void _mkarglst(char *, stva_list args, stva_list arglst[]); */
/* void _getarg(char *, stva_list *, int); */




/* port/stdio/fopen.c */
FILE *fopen(const char *, const char *);
FILE *fopen64(const char *, const char *);
FILE *freopen(const char *, const char *, FILE *);
FILE *freopen64(const char *, const char *, FILE *);

/* port/stdio/fprintf.c */
int fprintf(FILE *, const char *, ...);

/* port/stdio/printf.c */
/* VARARGS1 */
int printf(const char *, ...);

/* port/stdio/vfprintf.c */
/* VARARGS2 */
int vfprintf(FILE *, const char *, va_list);

/* port/stdio/vprintf.c */
/* VARARGS1 */
int vprintf(const char *, va_list);

/* port/stdio/vsprintf.c */
/* VARARGS2 */
char *vsprintf(char *, char *, va_list);

/* port/gen/nlist.c */
int nlist(const char *, struct nlist *);

/* port/gen/setpriority.c */
int getpriority(int, int);
int setpriority(int, int, int);

/* port/gen/siglist.c */

/* port/gen/_psignal.c */
void _psignal(unsigned, char *);

/* port/gen/bcmp.c */
int bcmp(char *, char *, int);

/* port/gen/bcopy.c */
void bcopy(char *, char *, int);

/* port/gen/bzero.c */
void bzero(char *, int);

/* port/gen/ftime.c */
int ftime(struct timeb *);

/* port/gen/getusershell.c */
char *getusershell(void);
int endusershell(void);
int setusershell(void);

/* port/gen/getwd.c */
char *getwd(char *);

/* port/gen/index.c */
char *index(char *, char);

/* port/gen/mkstemp.c */
int mkstemp(char *);

/* port/gen/nice.c */
int nice(int);

/* port/gen/psignal.c */
void psignal(unsigned, char *);

/* port/gen/rand.c */
int srand(unsigned);
int rand(void);

/* port/gen/random.c */
int srandom(unsigned);
char *initstate(unsigned, char *, int);
char *setstate(char *);
long random(void);

/* port/gen/regex.c */
char *re_comp(char *);
int re_exec(char *);

/* port/gen/rindex.c */
char *rindex(char *, char);

/* port/gen/setbuffer.c */
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);

/* port/gen/statfs.c */
int statfs(char *, struct statfs *);
int fstatfs(int, struct statfs *);
int cnvtvfs(struct statfs *, struct statvfs *);

/* port/gen/times.c */
clock_t times(struct tms *);

/* port/gen/ualarm.c */
unsigned ualarm(unsigned, unsigned);

/* port/gen/usleep.c */
int usleep(unsigned);
