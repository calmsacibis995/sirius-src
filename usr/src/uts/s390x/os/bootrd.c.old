/*------------------------------------------------------------------*/
/* 								    */
/* Name        - bootrd.c   					    */
/* 								    */
/* Function    - Provide ramdisk support for the boot process.      */
/* 								    */
/* Name	       - Neale Ferguson					    */
/* 								    */
/* Date        - July, 2006  					    */
/* 								    */
/*------------------------------------------------------------------*/

/*------------------------------------------------------------------*/
/*                   L I C E N S E                                  */
/*------------------------------------------------------------------*/

/*==================================================================*/
/* 								    */
/* CDDL HEADER START						    */
/* 								    */
/* The contents of this file are subject to the terms of the	    */
/* Common Development and Distribution License, Version 1.0 only    */
/* (the "License").  You may not use this file except in compliance */
/* with the License.						    */
/* 								    */
/* You can obtain a copy of the license at: 			    */
/* - usr/src/OPENSOLARIS.LICENSE, or,				    */
/* - http://www.opensolaris.org/os/licensing.			    */
/* See the License for the specific language governing permissions  */
/* and limitations under the License.				    */
/* 								    */
/* When distributing Covered Code, include this CDDL HEADER in each */
/* file and include the License file at usr/src/OPENSOLARIS.LICENSE.*/
/* If applicable, add the following below this CDDL HEADER, with    */
/* the fields enclosed by brackets "[]" replaced with your own      */
/* identifying information: 					    */
/* Portions Copyright [yyyy] [name of copyright owner]		    */
/* 								    */
/* CDDL HEADER END						    */
/* 								    */
/*==================================================================*/

/*------------------------------------------------------------------*/
/*                 D e f i n e s                                    */
/*------------------------------------------------------------------*/

/*========================= End of Defines =========================*/

/*------------------------------------------------------------------*/
/*                 I n c l u d e s                                  */
/*------------------------------------------------------------------*/

#pragma ident	"@(#)bootrd.c	1.0	2006/11/28 NAF"

#include <sys/param.h>
#include <sys/sunddi.h>
#include <sys/bootconf.h>
#include <sys/bootvfs.h>
#include <sys/filep.h>
#include <sys/kobj.h>
#include <sys/varargs.h>
#include <sys/reboot.h>

/*========================= End of Includes ========================*/

/*------------------------------------------------------------------*/
/*                 T y p e d e f s                                  */
/*------------------------------------------------------------------*/


/*========================= End of Typedefs ========================*/

/*------------------------------------------------------------------*/
/*                E x t e r n a l   R e f e r e n c e s             */
/*------------------------------------------------------------------*/

extern int get_weakish_int(int *);
extern struct bootops *ops;
extern struct boot_fs_ops bufs_ops, bhsfs_ops;
extern int kmem_ready;

/*=================== End of External References ===================*/

/*------------------------------------------------------------------*/
/*                   P r o t o t y p e s                            */
/*------------------------------------------------------------------*/


/*========================= End of Prototypes ======================*/

/*------------------------------------------------------------------*/
/*                 G l o b a l   V a r i a b l e s                  */
/*------------------------------------------------------------------*/

static uint64_t rd_start, rd_end;
struct boot_fs_ops *bfs_ops;
struct boot_fs_ops *bfs_tab[] = {&bufs_ops, &bhsfs_ops, NULL};

#ifdef	DEBUG
static uint64_t scratch_max;
#endif

/*====================== End of Global Variables ===================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- diskread.                                         */
/*                                                                  */
/* Function	- Read the ramdisk. If fi_memp is set, we copy the  */
/*		  ramdisk content to the designated buffer, else we */
/*		  do a "cached" read (set fi_memp to the actual     */
/*		  ramdisk buffer).             		 	    */
/*		                               		 	    */
/*------------------------------------------------------------------*/

int
diskread(fileid_t *filep)
{
	uint_t blocknum;
	caddr_t diskloc;

	/* add in offset of root slice */
	blocknum = filep->fi_blocknum;

	diskloc = (caddr_t)(uintptr_t)rd_start + blocknum * DEV_BSIZE;
	if (diskloc + filep->fi_count > (caddr_t)(uintptr_t)rd_end) {
		prom_printf("diskread: start = 0x%p, size = 0x%x\n",
		    diskloc, filep->fi_count);
		prom_printf("reading beyond end of ramdisk\n");
		return (-1);
	}

	if (filep->fi_memp) {
		bcopy(diskloc, filep->fi_memp, filep->fi_count);
	} else {
		/* "cached" read */
		filep->fi_memp = diskloc;
	}

	return (0);
}

/*========================= End of Function ========================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- kobj_boot_mountroot.                              */
/*                                                                  */
/* Function	- Mount the ramdisk using the appropriate file      */
/*		  system.                      		 	    */
/*		                               		 	    */
/*------------------------------------------------------------------*/

int
boot_mountroot()
{
	int i;
extern bootrd_debug;

bootrd_debug = 1;

	if (BOP_GETPROPLEN(ops, "ramdisk_start") != 8 ||
	    BOP_GETPROP(ops, "ramdisk_start", (void *)&rd_start) != 0 ||
	    BOP_GETPROPLEN(ops, "ramdisk_end") != 8 ||
	    BOP_GETPROP(ops, "ramdisk_end", (void *)&rd_end) != 0) {
		prom_printf("failed to get ramdisk from boot\n");
		return (-1);
	}

	prom_printf("ramdisk range: 0x%llx-0x%llx\n", rd_start, rd_end);

	for (i = 0; bfs_tab[i] != NULL; i++) {
		bfs_ops = bfs_tab[i];
prom_printf("mounter: %p\n",bfs_ops->fsw_mountroot);
		if (BRD_MOUNTROOT(bfs_ops, "dummy") == 0) 
			return (0);
	}
	prom_printf("failed to mount ramdisk from boot\n");
	return (-1);
}

/*========================= End of Function ========================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- kobj_boot_unmoutroot.                             */
/*                                                                  */
/* Function	- Unmount the boot ramdisk.                         */
/*		                               		 	    */
/*------------------------------------------------------------------*/

void
boot_unmountroot()
{
	(void) BRD_UNMOUNTROOT(bfs_ops);
}

/*========================= End of Function ========================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- kobj_printf.                                      */
/*                                                                  */
/* Function	- Provide a printf capability.                      */
/*		                               		 	    */
/*------------------------------------------------------------------*/

void
kobj_printf(char *fmt, ...)
{
	va_list adx;

	va_start(adx, fmt);
	prom_printf(fmt, adx);
	va_end(adx);
}

/*========================= End of Function ========================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- bkmem_alloc.                                      */
/*                                                                  */
/* Function	- Allocate storage for the ramdisk processing.      */
/*		                               		 	    */
/*------------------------------------------------------------------*/

void *
bkmem_alloc(size_t size)
{
	return (bop_alloc(NULL, size, sizeof(uint64_t)));

}

/*========================= End of Function ========================*/

/*------------------------------------------------------------------*/
/*                                                                  */
/* Name		- bkmem_free.                                       */
/*                                                                  */
/* Function	- Free storage used by the ramdisk processing.      */
/*		                               		 	    */
/*------------------------------------------------------------------*/

void
bkmem_free(void *p, size_t size)
{
	bop_free(p, size);
}

/*========================= End of Function ========================*/
