.\" ident	"%Z%%M%	%I%	%E% SMI"	
.\" Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
.\" Use is subject to license terms.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License, Version 1.0 only
.\" (the "License").  You may not use this file except in compliance
.\" with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"
.TH intf_check 1 "20 October 2004"
.SH NAME
intf_check \- detect and report possible Solaris ABI stability problems
.SH SYNOPSIS
\fBintf_check [-aimopstVT] [-d intf-dir] [-g ABI_DB_filename] [-r release]
[-b ABI_DB_path] [-A sparc | i386] file | dir, ...\fP
.LP
.SH DESCRIPTION
.IX "Solaris ABI Auditing tool" "intf_check" "" "\fBintf_check\fP"
The
.I intf_check
tool attempts to check a number of shared objects
for consistency with common build rules and practices for the OS/Net
consolidation.  In addition, it will audit the version definitions of
any shared object against the Solaris ABI database.  (See NOTES section
and \fB-b\fP option).
.LP
.I intf_check
is typically called from \fBnightly(1)\fP when the \fB-A\fP
option is in effect. In this case the shared objects under the associated
\fIproto\fP area (\fB$ROOT\fP) are audited against a Solaris ABI database
(under \fB$SRC/tools/abi/etc\fP).
.I intf_check
can also be run standalone against any set of dynamic objects.
.LP
.I intf_check
uses \fBelfdump(1)\fP and various forms of \fBpvs(1)\fP to check file naming
standardization, compilation symbolic link requirements, versioning
consistency, and successive symbolic interface consistency.
.LP
To perform its task,
.I intf_check
creates versions databases to allow for the auditing of interfaces and
monitoring of the evolution of the shared objects interfaces.  Once these
version databases are created, two types of checking can be performed to
ensure that all the RULES are followed (See RULES section):
.LP
.TP 4
\(bu
Discrepancy Checking.  This ABI behavior checking compares the latest
release specified in the Solaris ABI database with the file(s)/dir(s) listed
on the command line.  All misbehaviors/errors found are reported
to stdout.  This is the default behavior performed by
.I intf_check.
.TP
\(bu
Integrity Checking.  This ABI behavior checking compares all releases
specified in the Solaris ABI database with the file(s)/dir(s) listed
on the command line.  All misbehaviors/errors found are reported to stdout.
.PP
.SH OPTIONS
The following options are supported:
.IP "-\fBa\fR" 6
Prints all releases associated with the Solaris ABI database file
(See NOTES section).
.IP "-\fBb\fR \fIABI_DB_path\fR" 6
ABI_DB_path must contain the following files: ABI_*.db and exceptions.
By specifying the \fB-b\fP option, the
.I file(s)/dir(s)
will be audited against the ABI_*.db under the ABI_DB_path (See NOTES section).
.IP "-\fBd\fR \fIintf-dir\fR" 6
Identifies the directory in which to capture a complete breakdown of the
files' version definitions.
.B intf-dir
will reflect the association of the shared object's global symbols with
a recorded
.I version definition
(See
.BR ld(1)
and
.BR pvs(1)
for details).  By default, a temporary
.B intf-dir
is created under \fB/tmp/abi_audit.$$/\fP and will be deleted after completion
of auditing against a Solaris ABI database.
.IP "-\fBm\fR" 6
Generate a template SGML man page for each
.I file
containing a public interface.  The \fB-d\fP option must be specified
since the template is deposited into the
.B intf-dir
specified.  This is intended as a convenience for new library developers
so that a complete
.I /usr/man/sman3lib
man page, describing the library, and defining its interfaces, can be
constructed.
.IP "-\fBg\fR \fIABI_DB_filename\fR" 6
Generate an ABI database file
.I ABI_DB_filename.
This is used to provide a mechanism to record Solaris ABI information
on new releases.  The Solaris ABI database is generated by this option.
This option must be used in conjunction with the \fB-r\fP option.
.IP "-\fBr\fR \fIrelease\fR" 6
Record the release associated with the file(s)/dir(s) on the command line
into the ABI_DB_filename specified with the \fB-g\fP option.  This option
must be used in conjunction with the \fB-g\fP option.
.IP "-\fBo\fR" 6
Check for omitted libraries by comparing all libraries in ABI_*.db to the
.I file(s)/dir(s)
listed on the command line.  This flag is intended for users interested in
auditing against the complete list of libraries present in the ABI_*.db.
.IP "-\fBA sparc | i386\fR" 6
Perform checking against a platform specific ABI database.  Any name other 
than \fBsparc\fP and \fBi386\fP is currently ignored as an usage error. 
.IP "-\fBi\fR" 6
Perform Integrity Checking.  This option will audit the snapshot of
the current ABI information in the
.B intf-dir
to all previous releases specified in the Solaris ABI database.  Normal
users need not worry about this option.
.IP "-\fBp\fR" 6
Report new Public interfaces introduced in the file(s)/dir(s) as WARNING
(See RULES section, number W7).
.IP "-\fBs\fR" 6
Silence all WARNING messages (See OUTPUT MESSAGES section for details).  This
option overrides the \fB-p\fP and \fB-t\fP options.
.IP "-\fBt\fR" 6
Report symbol transitions from private to public as WARNING (See RULES section, number W8).
.IP "-\fBT\fR" 6
Report symbol transitions from private to unexported as WARNING (See RULES section, number W6).
.IP "-\fBV\fR" 6
Report version number of this tool.
.sp
.PP
Specifying the \fB-g\fP option overrides the \fB-i\fP, \fB-t\fP,
and \fB-o\fP options.
In addition, the \fB-A\fP and \fB-b\fP options are mutually exclusive.
.sp
No file(s)/dir(s) need to be specified with the \fB-V\fP and \fB-a\fP options.
.PP
.SH OPERANDS
The following operands are supported:
.IP "\fIfile | dir\fR \&..." 6
The path name of a
.I file
or a directory containing shared objects to be audited.
.PP
.SH OUTPUT
Standard Output
.PP
.SH OUTPUT FILES
By default, a more detailed breakdown of shared objects versioning is
stored in a temporary
.B intf-dir
under
.B /tmp/abi_audit.$$
(See -d option to specify an alternative intf-dir).
This directory will be used as the current build/release in auditing
with the previous Solaris release(s).
.LP
There are several version databases created under the
.B intf-dir:
.IP "\fBPublic-32 or Public-64\fR" 6
Shared objects that provide public version definitions are recorded as
file control directives.  These files therefore describe the public
interfaces available for a particular release, and may be used by the
link-editor (\fBld(1)\fP) to control symbol binding when building other
objects.
.IP "\fBaudit/\fR" 6
All version definitions found within a shared object, together with their
associated symbols, are recorded within an audit subdirectory.  Each
object is identified by an individual file that identifies the object's
name.
.sp
In addition, since multiple objects with the same name may exist under
different pathnames, each name is uniquely identified by its install
location as well, e.g. libcurses.so.1 exists in the
following install locations:
.RS 10
/usr/xpg4/lib/libcurses.so.1
.RE
.RS 10
/usr/lib/libcurses.so.1
.RE
.RS 10
/usr/ucblib/libcurses.so.1
.RE
.RS 10
\&\.\.\.
.RE
.RS 6
.sp
In order to resolve the path names, the shared objects are matched against
libraries found in the Solaris ABI database.  Heuristics are then used
to narrow the possible path names corresponding to the shared object
(e.g., path names containing sparcv9 are eliminated if the
.I file
is a 32-bit shared object.  See \fBfile(1)\fP for details.)
.sp
If multiple matches are still found for a particular shared object, a message
is reported to STDERR and the first match will be used for auditing.
If no match is found in the ABI_*.db, then the relative pathname is used
to identify this shared object.  For example, if the
.I dir
passed on the command line is \fB$ROOT\fP, and a new shared object exists
under \fB$ROOT/usr/lib/libfoo.so.1\fP, the new shared object will be
identified by \fBaudit/usr=lib=libfoo.so.1\fP.
.sp
These files provide a complete cross reference of version-to-interface
relationships and are the basis for auditing interfaces in a shared
object from release to release.  Any addition, deletion or regrouping
of versioning information can be detected by checking against
the Solaris ABI database.
.RE
.IP "\fBman/\fR" 6
If the \fB-m\fP option is specified, all template sgml man pages will
be deposited into this directory.
.RE
.PP
.SH RULES
By default, a shared object will be verified to ensure it has followed
all the RULES listed below.  (NOTE: The prefix to the numbers identify the
type of OUTPUT MESSAGE generated when a RULE is violated. The prefix can
be one of two types: "E" for ERROR, or "W" for WARNING).  Violation of
the following RULES will yield an ERROR message:
.PP
.IP "\fB(E1)\fR" 6
Version definitions must follow a standard naming convention, i.e.,
\fBSUNW_\fIm.n.o\fP, \fBSUNWprivate_\fIm.n\fP, \fBSUNWprivate\fP,
\fBSUNWobsolete\fP or a \fBbase version name\fP.
.sp
For \fBSUNW_\fIm.n.o\fP and \fBSUNWprivate_\fIm.n\fP, m is the major number,
n is the minor number, and o is an optional micro number.
.sp
\fBSUNWobsolete\fP is used to label the whole library which is expected to
end-of-life soon.  It is an empty version section containing no symbol
definitions on top of the inheritance chain in the "versions" or mapfile.
.sp
The \fBbase version name\fP represents the \fBfilename\fP and any associated
\fBSONAME\fP, and is used by the compiler/linker as the default "version".
It is used to record any reserved interface symbols generated by the tools
(i.e., \fB_end\fP, \fB_etext\fP, etc.).
.sp
In addition, note that non-conforming \fBbase version name\fP is often
generated by accident when the file itself has an internal identification
that differs from the actual \fBfilename\fP (See \fBld(1)\fP \fB-h\fP
option for details). 
An example would be a file called nss_files.so.1 in the filesystem, but asserts
via its \fBSONAME\fP that it will be called \fBlibnss_files.so.1\fP at
runtime, it is buggered.
A convention for other ABI interface naming would need to use some other
naming convention. SUNW* names only apply to the Solaris ABI.
.sp
Note that the reserved version definition names \fBSISCD_2.3\fI[a|b]\fP
and \fBSYSVABI_1.\fI[2|3]\fP
define industry standard interfaces in the System V Interface Definition and
the Sparc Compliance Definition.  Do not use these version names when
copying the implementation of standard interfaces to a non-standard library.
Instead, use the Public interface naming convention outlined above.
.IP "\fB(E2)\fR" 6
A proper inheritance chain must be maintained.  Version inheritance is
tracked through the versions file under the spec/ subdirectory (See README.spec
for details).  If the subsequent version set is not incremented properly
(i.e., it increments by more that .1 per release of a library), then this
results in a malformed inheritance chain.  Errors made in the inheritance
chain prior to 1.1 will be ignored by
.I intf_check
for historical purposes  (See \fBpvs(1)\fP \fB-d\fP option for details).
.IP "\fB(E3)\fR" 6
Public symbols must not be scoped local or removed from a library.
A shared object delivered in a previous software release has made available
all its global symbols for others to bind with.  Therefore, if a public
symbol is removed or scoped local on the current release, applications
depending on the removed public interface will break.
.IP "\fB(E4)\fR" 6
Public symbols must not be demoted to private.  This is a dangerous
practice since a committed public interface has become unstable.
.IP "\fB(E5)\fR" 6
A new symbol must be assigned to the highest version name of
its library.  A version definition exists to allow tracking of all intended
interfaces offered in a given release of the library.  Once the integrity
of these version definitions are broken, users of the shared object can no
longer track interfaces offered on each software release. Therefore,
new symbols should be assigned to the current minor release-level of the
library.  For new libraries, Public interface versioning begins with SUNW_1.1
while Private interface versioning should be SUNWprivate.  If the library
already has Private interfaces, they may have numbered version names like
SUNWprivate_\fIm.n\fP.  If so, just use the highest numbered private
version name for the new interface.
.IP "\fB(E6)\fR" 6
A symbol must remain assigned to the same version throughout the life of the
library. This version indicates when the symbol was first introduced.
If the interface is reassigned to a different version on another release,
its history information is lost.
.IP "\fB(E7)\fR" 6
The highest version number of a library must not be incremented by more than
".1" between releases.  Since each version definition indicates the interfaces
applied to each software release, no more than one version definition should
be specified per release of a library.
Note that the major revision number is incremented whenever an incompatible
change is made to an interface.  This could be the case if an API changes so
dramatically as to invalidate dependencies.  This is expected to rarely occur
in practice.
.sp
Also note that micro version numbers are used as a means of managing the
inclusion of a subset of an existing version into a micro release
(i.e., update release, feature patch...) When these subset interfaces are
introduced to a micro release, the symbol version is incremented by a
micro number [m.n.(o++)].  When release N+1 is frozen (at which time it
is expected that no more update releases for release N will be produced),
the micro versions of "N" must be inherited by the "N+1" release. 
.sp
For example; the "versions" file for minor release "N+1" to reflect its
inclusion of micro release(s) (i.e., m.n.o) will look like the following: 
.sp
.PP
.nf
      sparc { 
             SUNW_1.4:    {SUNW_1.3.2}; # release N+1 
             SUNW_1.3.2:  {SUNW_1.3.1}; # micro release 2
             SUNW_1.3.1:  {SUNW_1.3};   # micro release 1
             SUNW_1.3:    {SUNW_1.2};   # release N 
             SUNW_1.2:    {SUNW_1.1}; 
             SUNW_1.1; 
             SUNWprivate_1.1; 
      }

      and the corresponding update/patch "versions" file will be:

      sparc {
             SUNW_1.3.2:  {SUNW_1.3.1}; # micro release 2
             SUNW_1.3.1:  {SUNW_1.3};   # micro release 1
             SUNW_1.3:    {SUNW_1.2};   # release N
             SUNW_1.2:    {SUNW_1.1};
             SUNW_1.1;
             SUNWprivate_1.1;
      }

.fi
.PP
.sp
.IP "\fB(E8)\fR" 6
A shared object with an associated compilation environment name must have
a SONAME recorded.
.sp
.IP "\fB(E9)\fR" 6
A shared object with an associated compilation environment name and
a recorded SONAME must have its SONAME identical to the actual filename.
.sp
.IP "\fB(E10)\fR" 6
When you select a new version name (i.e., SUNW_m.n.o) to version a library
(i.e., libfoo.so.4), its major version number chosen must be the same as the
major version number present in its filename (i.e., m = 4).
.sp
.IP "\fB(E11)\fR" 6
Sun library filename must not contain any minor version number.
.sp
.IP "\fB(E12)\fR" 6
You must not introduce any new public interfaces to an already obsolete library.
.RE
.sp
Violation of any of the following RULES will yield a WARNING message, but may
be silenced with the -s option (See OUTPUT MESSAGES section):
.IP "\fB(W1)\fR" 6
A shared object should exist with a versioned filename.  A versioned
filename commonly takes the form of a \fI.so\fP suffix followed by a version
number.  For example, \fI/usr/lib/libc.so.1\fP is the shared object
representation of version one of the standard C library made available to
the runtime environment.  A versioned filename allows for a change in the
exported interface of the shared object over a series of software releases.
.IP "\fB(W2)\fR" 6
A shared object containing a public interface should have an associated
compilation environment name.  Given that a file does exist as a versioned
filename, a compilation environment filename should also exist if the shared
object offers any public interfaces.  This compilation environment name is
typically established as a symbolic link to the latest versioned filename.
In the compilation environment, this name provides for processing by the
link-editor (\fBld(1)\fP using the \fB-l\fP option, and takes the form
of a \fIlib\fP prefix and \fI.so\fP suffix.).  For example, libc.so exists
as a compilation symlink for the versioned filename libc.so.1.
.IP "\fB(W3)\fR" 6
A shared object containing only private interfaces should not have an
associated compilation environment name.  Note that it may be the case
that a compilation environment name exists to simplify the building of
other components, however if the versioned filename does not provide a
public interface, a compilation environment name may not be required to be
provided to external users.
.IP "\fB(W4)\fR" 6
A shared object should contain interfaces that are versioned.  Versions
should be defined within a shared object both to clarify its public or
private use, and to explicitly define the interfaces that it makes available.
The reduction in object size, and relocation cost created by reducing
non-interface symbols to locals is an added bonus.
.IP "\fB(W5)\fR" 6
Version definitions should offer at least one interface.  Note there exist
some legitimate uses of empty version definitions, as interfaces have been
regrouped, and old version definitions must exist to insure backward
compatibility.  However other empty interface definitions are typically the
result of cut-and-paste use within spec files.
.IP "\fB(W6)\fR" 6
Private symbols should not be removed or scoped local to a library without
careful analysis of dependencies on these interfaces.  Review of your contracts
with those who depend on these private interfaces is advised before changing
any symbols.
.IP "\fB(W7)\fR" 6
A new Public symbol should have a corresponding manpage and a 3lib manpage
entry.  If no documentation is available for the interface (i.e., the
interface is meant to be private), then this interface should be labeled
as SUNWprivate.
.IP "\fB(W8)\fR" 6
A committed private (a private contract between the supplier and
external user) interface should not be promoted to public if the transition
involves signature changes.  ARC approval is needed to allow such promotions.
.IP "\fB(W9)\fR" 6
Private interfaces should not be introduced to an already obsolete library.
.IP "\fB(W10)\fR" 6
Existing library should not be removed without following the appropriate
SAC "Obsolete and the EOF process".
.sp
.RE
.PP
.SH OUTPUT MESSAGES
All messages reported by
.I intf_check
are classified into two categories:
ERROR and WARNING.  These messages are generated when one of the RULES is
violated  (See RULES section).
.sp
ERROR messages require immediate attention.  ARC approval is needed to
exempt these errors.  If ARC approval is granted, the
\fIexceptions\fP file should be updated to silence any output messages
(See FILES section).  In the nightly \fImail_msg\fP log, the section labeled
"Check versioning and ABI information" corresponds to these types of errors.
The following is a list of ERROR messages that may appear:
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIversion name\fP: non-standard version name
	(See RULES section, number E1)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIold version\fP->\fIversion name\fP: invalid inheritance
	(See RULES section, number E2)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: was public in 5.8, is now unexported
	(See RULES section, number E3)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: was public in 5.8, is now private
	(See RULES section, number E4)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: invalid new version,\fR
\fB  SUNW_1.20 should be SUNW_1.21 in current release
	(See RULES section, number E5)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: base version not maintained,\fR
\fB  was SUNW_0.7 in 5.8, becomes SUNW_1.2 in current release
	(See RULES section, number E6)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: was \fIold version\fP in \fIold release\fP, becomes\fR
\fB  \fIversion name\fP in current release: inconsistent increment of version
	(See RULES section, number E7)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: no SONAME recorded
	(See RULES section, number E8)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: SONAME recorded differs from the actual filename
	(See RULES section, number E9)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.4: SUNW_1.1: invalid version name, should be SUNW_4.1\fR
\fB  to reflect major version
	(See RULES section, number E10)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.2.3: invalid library filename; should not use minor\fR
\fB  version number (.3) as part of filename
	(See RULES section, number E11)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.3: SUNWobsolete->version name: new public\fR
\fB  interface introduced to the obsolete library
	(See RULES section, number E12)\fR
.fi
.sp
.sp
WARNING messages may not cause immediate application breakage,
but they should be carefully reviewed as they indicate deviations from
standard practices.   In the nightly \fImail_msg\fP
log, the section labeled "Diff versioning warnings (since last build)"
corresponds to any differences in WARNING messages between the previous
and current builds.  The following is a list of WARNING messages that
may appear:
.PP
.nf
\fB  usr/lib/libfoo.so: does not have a versioned name
	(See RULES section, number W1)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so: no compilation symlink (.so) exists
	(See RULES section, number W2)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: unnecessary compilation symlink (.so) exists
	(See RULES section, number W3)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: no versions found
	(See RULES section, number W4)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIversion name\fP: version offers no interfaces
	(See RULES section, number W5)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: was private in 5.8, is now unexported
	(See RULES section, number W6)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: new public interface introduced
	(See RULES section, number W7 and -p option)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: \fIsymbol\fP: was private in 5.8, is now public
	(See RULES section, number W8 and -t option)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.4: SUNWobsolete->SUNWprivate_1.1: new private\fR
\fB  interface introduced to the obsolete library
	(See RULES section, number W9 and -t option)\fR
.fi
.PP
.PP
.nf
\fB  usr/lib/libfoo.so.1: library is not found
	(See RULES section, number W10)\fR
.RE
.PP
.SH EXIT STATUS
The following exit values are returned:
.IP "\fB0\fR" 6
Successful completion.
.IP "\fB1\fR" 6
An execution error occurred.
.PP
.SH LIMITATIONS
Comparing two snapshots of on81 builds requires approximately 35 MB
swap space (3 MB for each additional build).
.PP
.SH NOTES
.I intf_check
skips certain files and directories that are known to contain
shared objects that don't offer public interfaces.  Examples are plugins
for mdb and picl, and the ABI tracing interceptors for apptrace.
Note that such skipped directories must not contain shared objects that
do have public interfaces; such shared objects must be versioned and
audited by
.I intf_check.
The list of things to skip is contained in the
.I intf_check
script itself; requests to modify the list should be directed
to either the the Solaris ABI team or the OS/Net gatekeepers.
.sp
The Solaris ABI database file contains the ABI information for all
interfaces in one or more Solaris releases (See -a option).
.sp
A default collection of data files (i.e., a Solaris ABI database file and
the exceptions file) are located under /opt/onbld/etc/abi provided
with the SUNWonbld package.  A workspace may contain a newer version of the
files by specifying the \fB-b\fP option with $SRC/tools/abi/etc as the
ABI_DB_path, or if the \fB-b\fP option is not specified, the $SRC environment
variable needs to be set to access these files.
.sp
By default, intf_check will use the database file corresponding to the
machine architecture this tool is run from (i.e., $MACH).  However, the
developer may enable auditing against a different platform by specifying
the \fB-A\fP option.  (See OPTIONS section for details).
.PP
.SH FILES
.IP "\fB/opt/onbld/etc/abi/ABI_sparc\&.db\fR " 6
Solaris ABI database file for SPARC platform.
.IP "\fB/opt/onbld/etc/abi/ABI_i386\&.db\fR " 6
Solaris ABI database file for i386 platform.
.IP "\fB/opt/onbld/etc/abi/exceptions\fR " 6
ABI exceptions file.
.PP
.PP
\fIexceptions\fP contains historical bugs which have been excused by an ARC case number or a bugid.  One of the following formats must be used when making additions to this database:
.PP
.nf
	  <ARC # or bugid>: <RULE #>: <library>: <symbol>\fR
	  <ARC # or bugid>: <RULE #>: <library>: <version name>\fR
	  <ARC # or bugid>: <RULE #>: <library>\fR
.fi
.PP
The <ARC #> must have the following format:
.nf
\fB	<ARC name> <4 digit year>/<3 digit case number>
.fi
where the ARC name refers to the corresponding ARC from which approval is granted. i.e., PSARC, LSARC, etc.
.sp
The <RULE #> corresponds to the RULE which was violated
by this bug.  (See OUTPUT MESSAGES to identify the RULE
to specify in this field.)
.sp
Also, see OUTPUT MESSAGES to identify the <symbol> and <version name> fields.
For examples of entries, please refer to the exceptions file itself.
.PP
.SH EXAMPLES
For library developers, only check for ABI instabilities on a single
shared object:
.sp
.PP
.RS
.nf
.B % intf_check /usr/lib/libfoo.so.1
.br
.fi
.RE
.sp
For gatekeepers or developers who wish to check for ABI instabilities
on the entire ON gate, the \fB-b\fP option should be specified to ensure that
the most relevant ABI database and exceptions files are used for auditing.
In addition, the -o option ensures all omitted libraries are detected:
.PP
.RS
.nf
.B % intf_check -V -o -m \ \\\\ \&
.B \ \ \ \ \ \ -b $SRC/tools/abi/etc\ \\\\ \&
.B \ \ \ \ \ \ -d $SRC/interfaces.out $ROOT\ \\\\ \&
.B \ \ \ \ \ \ > $SRC/interfaces.out/log
.B % ls -1R $SRC/interfaces.out
Public-32
Public-64
audit/
log
man/

$SRC/interfaces.out/audit:
usr=lib=libadm.so.1
usr=lib=libaio.so.1
usr=lib=libfoo.so.1
\&\.\.\.\.\.\.\.

% cat log
\&\.\.\.\.\.\.\.
.nf
.B ERROR: usr/lib/libfoo.so.1: bar: was public in
5.8, is now unexported
\&\.\.\.\.\.\.\.

.br
.fi
.RE
.sp
.PP
.SH SEE ALSO
.BR ld (1),
.BR ldd (1),
.BR elfdump (1),
.BR pvs (1),
.BR nightly (1),
.BR README.spec.
.LP
.TZ LLM
